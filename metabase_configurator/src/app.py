import os
import time
import requests as rq
from configurator_settings import (
    DWH_POSTGRES_ADMIN, DWH_POSTGRES_PASSWORD, DWH_POSTGRES_DB, 
    DWH_POSTGRES_HOST, MB_ADMIN_FIRST_NAME, MB_ADMIN_LAST_NAME, 
    MB_ADMIN_EMAIL, MB_ADMIN_PASSWORD, SETUP_TOKEN_URL, 
    SETUP_ADMIN_URL, SETUP_DATABASE_URL, NEW_USER_URL
)


def return_token_if_connection_open(token):
    connection_is_not_open = True
    while connection_is_not_open:
        try:
            res_token = rq.get(token)
            if res_token.ok:
                connection_is_not_open = False
                temp_token = res_token.json()['setup-token']
        except rq.exceptions.ConnectionError:
            print('Database is still not available.. waiting 30s')
            time.sleep(30)
    print(f'Temporary token generated by Metabase : {temp_token}')
    return temp_token

def create_admin_user(setup_admin_url, temp_token, first_name, last_name, email, password):
    """
    Create Admin User and return Authentication Token

    Parameters:
      - setup_admin_url (str): Metabase endpoint to setup Admin
      - temp_token (str): Temporary token generated by Metabase API
        (endpoint api/session/properties)
      - first_name (str): First Name of the Admin
      - last_name (str): Last Name of the Admin
      - email (str): Email of the Admin
      - password (str): Password of the Admin

    Returns:
      - auth_token (str): Admin Authentication Token generated by Metabase
    """

    data_admin = {
        "token": temp_token,
        "prefs":{"site_name":"Metabase","allow_tracking":"true", "site_locale":"fr"},
        "user": {
            "email": email, 
            "password": password,
            "first_name": first_name,
            "last_name": last_name,
            "site_name":"Metabase"
        },
        "database": None
    }

    res_admin = rq.post(setup_admin_url, json=data_admin)
    if res_admin.ok:
        auth_token = res_admin.json()['id']
        
        print(auth_token)
        print('Admin created')
    
        return auth_token

    else:
        raise Exception(f'Cannot connect to Metabase. Status Code : {res_admin.status_code}')


def add_postgres_database(
    setup_database_url, 
    headers,
    database_host, 
    database_name, 
    admin, 
    password
):
    """
    Create Admin User and return Authentication Token

    Parameters:
      - setup_database_url (str): Metabase endpoint to add database
      - headers (dict): Headers in the format:
        {'X-Metabase-Session':'your-token'}
      - database_host (str): Host of the database
      - database_name (str): Name of the database
      - admin (str): Username of the Admin
      - password (str): Password of the Admin

    Returns:
      - auth_token (str): Admin Authentication Token generated by Metabase
    """

    dc_db = {
        "engine": "postgres",
        "name": "DWH Postgres",
        "details": {
            "host": database_host,
            "port": "5432",
            "db": database_name,
            "user": admin,
            "password": password
        },
        "is_full_sync": True
    }

    res_db = rq.post(setup_database_url, json=dc_db, headers=headers)

    if res_db.ok:
        print('Database succesfully created')

    


def metabase_configurator():

    # ## Get Temporary Token
    temp_token = return_token_if_connection_open(SETUP_TOKEN_URL)
    
    auth_token = create_admin_user(
        SETUP_ADMIN_URL, 
        temp_token, 
        MB_ADMIN_FIRST_NAME, 
        MB_ADMIN_LAST_NAME, 
        MB_ADMIN_EMAIL, 
        MB_ADMIN_PASSWORD
    )

    dc_headers = {'X-Metabase-Session':auth_token}

    add_postgres_database(
        SETUP_DATABASE_URL,
        dc_headers,
        DWH_POSTGRES_HOST,
        DWH_POSTGRES_DB,
        DWH_POSTGRES_ADMIN,
        DWH_POSTGRES_PASSWORD
    )


if __name__ == '__main__':
    metabase_configurator()