version: '3.7'

services:

  # Metabase + PostgreSQL services

  metabase:
    image: metabase/metabase
    ports:
      - "3000:3000"
    depends_on:
      - metabase_db
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: $MB_DB_ADMIN
      MB_DB_PASS: $MB_DB_PASSWORD
      MB_DB_HOST: metabase_db

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
  metabase_db:
    image: postgres:10-alpine
    environment:
      POSTGRES_USER: $MB_DB_ADMIN
      POSTGRES_PASSWORD: $MB_DB_PASSWORD
      POSTGRES_DB: metabase
      
  
  # postgreSQL service (share data between services)

  postgres_dwh:
    image: postgres:10-alpine
    container_name: postgres_dwh
    volumes:
      - "./data_repo:/host"
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: $DWH_POSTGRES_ADMIN
      POSTGRES_PASSWORD: $DWH_POSTGRES_PASSWORD
      POSTGRES_DB: testdb


## Airbyte

  # hook in case we need to add init behavior
  # every root service (no depends_on) should depend on init
  init:
    image: airbyte/init:${VERSION}
    container_name: init
    command: /bin/sh -c "./scripts/create_mount_directories.sh /local_parent ${HACK_LOCAL_ROOT_PARENT} ${LOCAL_ROOT}"
    environment:
      - LOCAL_ROOT=${LOCAL_ROOT}
      - HACK_LOCAL_ROOT_PARENT=${HACK_LOCAL_ROOT_PARENT}
    volumes:
      - ${HACK_LOCAL_ROOT_PARENT}:/local_parent
  db:
    image: airbyte/db:${VERSION}
    container_name: airbyte-db
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=db-${DATABASE_DB}
    volumes:
      - db:/var/lib/postgresql/data
  seed:
    image: airbyte/seed:${VERSION}
    container_name: airbyte-data-seed
    # Pre-populate the volume if it is empty.
    # See: https://docs.docker.com/storage/volumes/#populate-a-volume-using-a-container
    volumes:
      - data:/app/seed
  scheduler:
    image: airbyte/scheduler:${VERSION}
    container_name: airbyte-scheduler
    environment:
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_URL=jdbc:postgresql://db:5432/${DATABASE_DB}
      - WAIT_BEFORE_HOSTS=5
      - WAIT_HOSTS_TIMEOUT=45
      - WAIT_HOSTS=db:5432
      - WORKSPACE_ROOT=${WORKSPACE_ROOT}
      - WORKSPACE_DOCKER_MOUNT=${WORKSPACE_DOCKER_MOUNT}
      - LOCAL_DOCKER_MOUNT=${LOCAL_DOCKER_MOUNT}
      - CONFIG_ROOT=${CONFIG_ROOT}
      - TRACKING_STRATEGY=${TRACKING_STRATEGY}
      - AIRBYTE_VERSION=${VERSION}
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - workspace:${WORKSPACE_ROOT}
      - ${LOCAL_ROOT}:${LOCAL_ROOT}
      - data:${CONFIG_ROOT}
  server:
    image: airbyte/server:${VERSION}
    container_name: airbyte-server
    environment:
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_URL=jdbc:postgresql://db:5432/${DATABASE_DB}
      - WAIT_BEFORE_HOSTS=5
      - WAIT_HOSTS_TIMEOUT=45
      - WAIT_HOSTS=db:5432
      - CONFIG_ROOT=${CONFIG_ROOT}
      - TRACKING_STRATEGY=${TRACKING_STRATEGY}
      - AIRBYTE_VERSION=${VERSION}
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - WORKSPACE_ROOT=${WORKSPACE_ROOT}
    ports:
      - 8001:8001
    volumes:
      - workspace:${WORKSPACE_ROOT}
      - data:${CONFIG_ROOT}
  webapp:
    image: airbyte/webapp:${VERSION}
    container_name: airbyte-webapp
    ports:
      - 8000:80
    environment:
      - TRACKING_STRATEGY=${TRACKING_STRATEGY}
      - PAPERCUPS_STORYTIME=${PAPERCUPS_STORYTIME:-}
      - AIRBYTE_VERSION=${VERSION}
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - API_URL=${API_URL}

  dbt:
    image: datafuel/dbt
    # build: ./dbt_repo
    # command: python -u metabase_setup.py
    container_name: dbt
    expose:
      - 4444
    ports:
      - 4444:4444
    volumes:
      - ./dbt_repo/src:/src
      - ./dbt_repo/profiles:/root/.dbt
      - ./dbt_repo/metabt:/src_metabt/metabt
    environment:
      DWH_POSTGRES_ADMIN: $DWH_POSTGRES_ADMIN
      DWH_POSTGRES_PASSWORD: $DWH_POSTGRES_PASSWORD
      DWH_POSTGRES_DB: testdb
      DWH_POSTGRES_HOST: postgres_dwh
      MB_ADMIN_EMAIL: $MB_ADMIN_EMAIL
      MB_ADMIN_PASSWORD: $MB_ADMIN_PASSWORD
      DWH_POSTGRES_PORT: 5432
      DWH_POSTGRES_STG_SCHEMA: stg
      DWH_POSTGRES_PRS_SCHEMA: prs
      MB_ADMIN_FIRST_NAME: $MB_ADMIN_FIRST_NAME
      MB_ADMIN_LAST_NAME: $MB_ADMIN_LAST_NAME
    stdin_open: true
    tty: true
volumes:
  workspace:
    name: ${WORKSPACE_DOCKER_MOUNT}
  data:
    name: ${DATA_DOCKER_MOUNT}
  db:
    name: ${DB_DOCKER_MOUNT}